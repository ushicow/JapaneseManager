/*******************************************************************      JMTools2.cc                                             ****      Japanese Manager code conversion routines               **** a    V1.3    Feb. 2,1991  new                                **** b    V1.31   Mar. 3,1991  bug fix - Sjis2Index               **** c    V1.32   May  6,1991  bug fix - Index2JMT                ****      V1.4    June 16,1991 bug fix - Index2SJis               **                      ****      V1.5    Feb. 21,1993 kana				*******************************************************************/#pragma keep    "JMTools2"#include        <types.h>#include        "JM.h"/******************************************************************* Takes a JM text code and produces a index code               **** input:                                                       ****      Word w_jmt: Japanese Manager text code                  **** return:                                                      ****      Word : index code                                       **** error:                                                       ****      JMERR_BAD_JMT                                           **** edition date comment                                         **** 1.3a    1202 new                                             *******************************************************************/Word Jmt2Index(Word w_jmt){        Word w_hi;          /* high byte of JMT                 */        Word w_lo;          /* low byte of JMT                  */        Word w_index;       /* index code                       */        jmw_error = FALSE;        w_hi = w_jmt & 0xFF00;        w_lo = w_jmt & 0x00FF;        if (w_hi == 0) {            if (w_lo < ASCII_MAX) {                w_index = w_lo + INDEX_ASCII;            } else {                jmw_error = JMERR_BAD_JMT;            }        } else if (JMT_1ST_MIN <= w_hi && w_hi <= JMT_1ST_MAX) {            w_index = JMT_BLK_SIZE * ((w_hi - JMT_1ST_MIN) >> 8);            if (JMT_2ND_MIN1 <= w_lo && w_lo <= JMT_2ND_MAX1) {                w_index += w_lo - JMT_2ND_MIN1;            } else if (JMT_2ND_MIN2 <= w_lo && w_lo <= JMT_2ND_MAX2) {                w_index += jmba_to_alt[w_lo - JMT_2ND_MIN2];            } else {                jmw_error = JMERR_BAD_JMT;            }        } else {            jmw_error = JMERR_BAD_JMT;        }        if (jmw_error) {            return INDEX_MISS;        } else {            return w_index;        }} /* end of Jmt2Index *//******************************************************************* Takes a index code and produces a JM text code               **** input:                                                       ****      Word w_index: index code                                **** return:                                                      ****      Word : JM text code                                     **** error:                                                       ****      JMERR_BAD_INDEX                                         **                                                        **** edition date comment                                         **** 1.3a    1202 new                                             *******************************************************************/Word Index2Jmt(Word w_index){        Word w_jmt;         /* jmt code                         */          jmw_error = FALSE;        if (INDEX_ASCII <= w_index                && w_index <= INDEX_ASCII + ASCII_MAX) {            w_jmt = w_index - INDEX_ASCII;        } else if (INDEX_KANA <= w_index && w_index < INDEX_L3) {            w_jmt = ((w_index / JMT_BLK_SIZE) << 8) + JMT_1ST_MIN                    + jmba_to_jmt[w_index % JMT_BLK_SIZE];        } else {            jmw_error = JMERR_BAD_INDEX;        }          if (jmw_error) {            return JMT_MISS;        } else {            return w_jmt;        }} /* end of Index2Jmt */Word wa_kana[] = {0xa182, 0xa156, 0xa157, 0xa181, 0xa185,		  0xa572, 0xa580, 0xa582, 0xa584, 0xa586, 0xa588,                  0xa563, 0xa565, 0xa567, 0xa543, 0xa191,                  0xa581, 0xa583, 0xa585, 0xa587, 0xa589,                  0xa58a, 0xa58c, 0xa58e, 0xa531, 0xa533,                  0xa535, 0xa537, 0xa539, 0xa590, 0xa592,                  0xa594, 0xa541, 0xa544, 0xa546, 0xa548,                  0xa54a, 0xa54b, 0xa54c, 0xa54d, 0xa54e,                  0xa54f, 0xa552, 0xa555, 0xa558, 0xa596,                  0xa599, 0xa59a, 0xa59b, 0xa561, 0xa562,                  0xa564, 0xa566, 0xa568,                  0xa569, 0xa56a, 0xa56b, 0xa56c, 0xa56d,                  0xa56f, 0xa573, 0xa18a, 0xa18b,                  0xa180};/******************************************************************* Takes a shifted JIS code and produces a index code           **** input:                                                       ****      Word w_sjis: shifted JIS code                           **** return:                                                      ****      Word : index code                                       **** error:                                                       ****      JMERR_BAD_SJIS                                          **                                                        **** edition date comment                                         **** 1.3a    1202 new                                             **** 1.3b    1303 bug fix                                         **** 1.5     3221 kana						*******************************************************************/Word Sjis2Index(Word w_sjis){        Word w_hi;          /* high byte of shifted JIS         */        Word w_lo;          /* low byte of shifted JIS          */        Word w_index;       /* index code                       */          jmw_error = FALSE;        w_hi = w_sjis & 0xFF00;        w_lo = w_sjis & 0x00FF;        if (w_hi == 0) {            if (w_lo <= ASCII_MAX) {                w_index =  w_lo + INDEX_ASCII;            } else if (KANA_MIN <= w_lo && w_lo <= KANA_MAX) {                w_index = Jmt2Index(wa_kana[w_lo - KANA_MIN]);            } else {                jmw_error = JMERR_BAD_SJIS;            }        } else {            if (SJIS_1ST_MIN1 <= w_hi && w_hi <= SJIS_1ST_MAX1) {                w_index = SJIS_BLK_SIZE                        * ((w_hi - SJIS_1ST_MIN1) >> 8) + INDEX_L0;            } else if (SJIS_1ST_MIN2 <= w_hi && w_hi<= SJIS_1ST_MAX2) {                w_index = SJIS_BLK_SIZE                        * (((SJIS_1ST_MAX1 - SJIS_1ST_MIN1) >> 8) + 1);                w_index += SJIS_BLK_SIZE                        * ((w_hi - SJIS_1ST_MIN2) >> 8) + INDEX_L0;            } else {                jmw_error = JMERR_BAD_SJIS;            }            if (SJIS_2ND_MIN1 <= w_lo && w_lo <= SJIS_2ND_MAX1) {                w_index += w_lo - SJIS_2ND_MIN1;            } else if (SJIS_2ND_MIN2 <= w_lo && w_lo <= SJIS_2ND_MAX2) {                w_index += SJIS_2ND_MAX1 - SJIS_2ND_MIN1 + 1;                w_index += w_lo - SJIS_2ND_MIN2;            } else {                jmw_error = JMERR_BAD_SJIS;            }        }        if (jmw_error) {            return INDEX_MISS;        } else {            return w_index;        }} /* end of Sjis2Index *//******************************************************************* Takes a index code and produces a shifted JIS code           **** input:                                                       ****      Word w_index: index code                                **** return:                                                      ****      Word : shifted JIS code                                 **** error:                                                       ****      JMERR_BAD_INDEX                                         **                                                        **** edition date comment                                         **** 1.3a    1202 new                                             **** 1.3c    1506 new                                             **** 1.4     1616 bug fix                                         *******************************************************************/Word Index2Sjis(Word w_index){        Word w_hi;          /* high byte of shifted JIS code    */        Word w_lo;          /* low byte of shifted JIS code     */        Word w_sjis;        /* shifted JIS code                 */          jmw_error = FALSE;        if (INDEX_ASCII <= w_index                && w_index <= INDEX_ASCII + ASCII_MAX) {            w_sjis = w_index - INDEX_ASCII;        } else if (INDEX_L0 <= w_index && w_index < INDEX_L3) {            if (w_index < INDEX_L0) {	        w_index += INDEX_L0;            }            w_hi = (((w_index - INDEX_L0) / SJIS_BLK_SIZE) << 8)                     + SJIS_1ST_MIN1;            if (w_hi > SJIS_1ST_MAX1) {                w_hi += SJIS_1ST_MIN2 - SJIS_1ST_MAX1 - 0x100;            }            w_lo = ((w_index - INDEX_L0) % SJIS_BLK_SIZE)                    + SJIS_2ND_MIN1;            if (w_lo > SJIS_2ND_MAX1) {                w_lo += SJIS_2ND_MIN2 - SJIS_2ND_MAX1 - 1;            }            w_sjis = w_hi + w_lo;        } else {            jmw_error = JMERR_BAD_INDEX;        }          if (jmw_error) {            return SJIS_MISS;        } else {            return w_sjis;        }} /* end of Index2Sjis *//******************************************************************* Takes a shifted JIS code and produces a JM text code         **** input:                                                       ****      Word w_sjis: shifted JIS code                           **** return:                                                      ****      Word : Japanese Manager text code                       **** error:                                                       ****      JMERR_BAD_SJIS                                          **                                                        **** edition date comment                                         **** 1.3a    1202 new                                             *******************************************************************/Word Sjis2Jmt(Word w_sjis){        Word w_index;       /* index code                       */          w_index = Sjis2Index(w_sjis);        if (jmw_error) {            return JMT_MISS;        } else {            return Index2Jmt(w_index);        }} /* end of Sjis2Jmt *//******************************************************************* Takes a JM text code and produces a shifted JIS code         **** input:                                                       ****      Word w_jmt : Japanese Manager text code                 **** return:                                                      ****      Word : shifted JIS code                                 **** error:                                                       ****      JMERR_BAD_JMT                                           **                                                        **** edition date comment                                         **** 1.3a    1202 new                                             *******************************************************************/Word Jmt2Sjis(Word w_jmt){        Word w_index;       /* index code                       */          w_index = Jmt2Index(w_jmt);        if (jmw_error) {            return SJIS_MISS;        } else {            return Index2Sjis(w_index);        }} /* end of Jmt2Sjis */