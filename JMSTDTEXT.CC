/*******************************************************************      JMStdText.cc                                            ****      Japanese Manager bottleneck procedure                   ****      V1.3    Feb. 2,1991 new                                 ****      V1.4    Jun.16,1991 bug fix                             ****      V1.5    Feb.21,1993 bug fix and optimize                *******************************************************************/#pragma keep    "JMStdText"#include        <types.h>#include        <memory.h>#include        <quickdraw.h>#include        "JM.h"/*==============================================================****      check font family and return its handle                 **                                  **** input:                                                       ****      None                                                    **** return:                                                      ****      FontHndl : current Japanese font handle                 **** error:                                                       ****      JMERR_BAD_FAMLY                                         ****      JMERR_BAD_SIZE                                          **** edition date comment                                         **** 1.3a    1202 new                                             ****==============================================================*/FontHndl    CheckFont(void){        FontHndl    h_cur_font; /* current font handle          */        FontPtr     p_cur_font; /* current font pointer         */        h_cur_font = GetFont();        HLock(h_cur_font);        p_cur_font = *h_cur_font;        if (p_cur_font->family == JM_GOTHIC) {            if (p_cur_font->size == JMSYS_FNT_SIZE) {                jmr_sys_fsf.pbitimage = (Word *)(p_cur_font)                        + OFFSET_BIT_IMG;                jmr_sys_fsf.wrowwords = *((Word *)p_cur_font                        + OFFSET_ROWWORD);                jmw_error = NULL;            } else {                HUnlock(h_cur_font);                jmw_error = JMERR_BAD_SIZE;            }        } else {            HUnlock(h_cur_font);            jmw_error = JMERR_BAD_FAMLY;        }        return h_cur_font;} /* end of CheckFont *//*==============================================================****      convert text to internal text format                    **                                  **** input:                                                       ****      q_buffer : dest buffer                                  ****      p_buffer : source buffer                                ****      w_length : source text length (bytes)                   **** return:                                                      ****      Word : converted text length                            **** error:                                                       ****      None                                                    **** edition date comment                                         **** 1.3a    1202 new                                             **** 1.5     2808 optimize                                        ****==============================================================*/Word    ConvText(Byte *q_buffer, Byte *p_buffer, Word w_length){        Byte        b_first;    /* first charcter               */        Word        w_1st;      /* high byte of JMT             */        Word        w_jmt;        Word        w_index;        Word        w_folder;   /* folder number                */        b_first = *p_buffer;        if (b_first <= JMT_2ND_MAX2) {            w_1st = jmw_1st;            jmw_1st = NULL;                                     /* #005 */        } else {            w_1st = NULL;        }        w_folder = 0;        while (w_length-- > 0) {            w_jmt = *(p_buffer++);            if (w_jmt <= JMT_2ND_MAX2) {                w_index = Jmt2Index(w_1st | w_jmt);                if (INDEX_ASCII <= w_index                        && w_index <= INDEX_ASCII + ASCII_MAX) {                    if (w_index == INDEX_ASCII + ' ') {                        *(q_buffer++) = FSF_SPACE;                    } else {                        *(q_buffer++) = w_index - INDEX_ASCII + FSF_ASCII;                    }                    ++w_folder;                } else if (INDEX_KANA <= w_index && w_index < INDEX_L1) {                    CopyImage(&jmr_sys_fsf, w_folder, &jmr_sys_l0,                            w_index);                    *(q_buffer++) = w_folder++;                } else if (INDEX_L1 <= w_index && w_index < INDEX_L2) {                    CopyImage(&jmr_sys_fsf, w_folder, &jmr_sys_l1,                            w_index);                    *(q_buffer++) = w_folder++;                } else if (INDEX_L2 <= w_index && w_index < INDEX_L3) {                    CopyImage(&jmr_sys_fsf, w_folder, &jmr_sys_l2,                            w_index);                    *(q_buffer++) = w_folder++;                } else {                    CopyImage(&jmr_sys_fsf, w_folder, &jmr_sys_l0,                            INDEX_L0);                    *(q_buffer++) = w_folder++;                }                w_1st = NULL;            } else {                w_1st = w_jmt << 8;                             /* #005 */                *(q_buffer++) = FSF_SPACE;                ++w_folder;            }        }        jmw_1st = w_1st;                                        /* #005 */        return w_folder;} /* end of ConvText *//*==============================================================****      copy bit image                                          **                                  **** input:                                                       ****      p_fsf : FSF record                                      ****      w_folder : folder number                                ****      p_jfont : JFont record                                  ****      w_index : index                                         **** return:                                                      ****      None                                                    **** error:                                                       ****      None                                                    **** edition date comment                                         **** 1.3a    1202 new                                             **** 1.4     1616 bug fix                                         **** 1.5     2808 bug fix and optimize                            ****==============================================================*/void    CopyImage(JFolderPtr p_fsf, Word w_folder,        JFontPtr p_jfont, Word w_index){        int     i_row;        long    l;        Word    *p, *q;        q = p_fsf->pbitimage + (long)w_folder;                  /* #005 */        l = p_fsf->wrowwords;        if (p_jfont->wfirst <= w_index && w_index <= p_jfont->wlast) {            p = (Word *)(p_jfont->pimage                    + ((long)(w_index - p_jfont->wfirst)<<4));  /* #005 */        } else {            p = jmwa_miss_img;        }        for (i_row = 0; i_row < 8; i_row++) {             *q = *p;             ++p;             q += l;        }}/* end of JMStdText.cc */